{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ne-project-one-df"
		},
		"AZBlob1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AZBlob1'"
		},
		"AZSqlDB_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AZSqlDB'"
		},
		"AZCosmosMongo_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AZCosmosMongo'"
		},
		"AZBlob2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AZBlob2'"
		},
		"AZCosmosMongo_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "projectOneOnholdSink"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AZBlob1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AZBlob1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TransactionCSVSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AZBlob1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "csv-transaction.csv",
						"container": "transaction-source-blobs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "TransactionID",
						"type": "String"
					},
					{
						"name": "FromAccountNumber",
						"type": "String"
					},
					{
						"name": "ToAccountNumber",
						"type": "String"
					},
					{
						"name": "Amount",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AZBlob1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TransactionExcelSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AZBlob1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "excel-transactions.xlsx",
						"container": "transaction-source-blobs"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "TransactionID",
						"type": "String"
					},
					{
						"name": "FromAccountNumber",
						"type": "String"
					},
					{
						"name": "ToAccountNumber",
						"type": "String"
					},
					{
						"name": "Amount",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AZBlob1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZSqlDB')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AZSqlDB_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TransactionSqlSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AZSqlDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TransactionID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FromAccountNumber",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ToAccountNumber",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Amount",
						"type": "float",
						"precision": 15
					},
					{
						"name": "Status",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TransactionsDB"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AZSqlDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SplitData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "TransactionSqlSource",
								"type": "DatasetReference"
							},
							"name": "SQL"
						},
						{
							"dataset": {
								"referenceName": "TransactionExcelSource",
								"type": "DatasetReference"
							},
							"name": "Excel"
						},
						{
							"dataset": {
								"referenceName": "TransactionCSVSource",
								"type": "DatasetReference"
							},
							"name": "CSV"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SqlSuccessSink",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "V2Sink",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "V2Sink",
								"type": "DatasetReference"
							},
							"name": "sink3"
						},
						{
							"dataset": {
								"referenceName": "V2Sink",
								"type": "DatasetReference"
							},
							"name": "AllTransactions"
						}
					],
					"transformations": [
						{
							"name": "Union1"
						},
						{
							"name": "ConditionalSplit1"
						}
					],
					"script": "source(output(\n\t\tTransactionID as integer,\n\t\tFromAccountNumber as integer,\n\t\tToAccountNumber as integer,\n\t\tAmount as double,\n\t\tStatus as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SQL\nsource(output(\n\t\tTransactionID as integer,\n\t\tFromAccountNumber as integer,\n\t\tToAccountNumber as integer,\n\t\tAmount as float,\n\t\tStatus as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> Excel\nsource(output(\n\t\tTransactionID as integer,\n\t\tFromAccountNumber as integer,\n\t\tToAccountNumber as integer,\n\t\tAmount as float,\n\t\tStatus as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> CSV\nSQL, Excel, CSV union(byName: true)~> Union1\nUnion1 split(Status == \"Success\",\n\tStatus == \"OnHold\",\n\tdisjoint: false) ~> ConditionalSplit1@(TransactionStatusSuccess, TransactionStatusOnHold, TransactionStatusFailed)\nConditionalSplit1@TransactionStatusSuccess sink(input(\n\t\tTransactionID as integer,\n\t\tFromAccountNumber as integer,\n\t\tToAccountNumber as integer,\n\t\tAmount as double,\n\t\tStatus as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1\nConditionalSplit1@TransactionStatusOnHold sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['OnHoldTransactions.csv'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink2\nConditionalSplit1@TransactionStatusFailed sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['FailedTransactions.csv'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink3\nUnion1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['AllTransactions.csv'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> AllTransactions"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/TransactionSqlSource')]",
				"[concat(variables('factoryId'), '/datasets/TransactionExcelSource')]",
				"[concat(variables('factoryId'), '/datasets/TransactionCSVSource')]",
				"[concat(variables('factoryId'), '/datasets/SqlSuccessSink')]",
				"[concat(variables('factoryId'), '/datasets/V2Sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlSuccessSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AZSqlDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TransactionID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FromAccountNumber",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ToAccountNumber",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Amount",
						"type": "float",
						"precision": 15
					},
					{
						"name": "Status",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "SuccessSink"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AZSqlDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MongoFailSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AZCosmosMongo",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CosmosDbMongoDbApiCollection",
				"schema": [],
				"typeProperties": {
					"collection": "OnHoldTransactions"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AZCosmosMongo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZCosmosMongo')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "CosmosDbMongoDbApi",
				"typeProperties": {
					"connectionString": "[parameters('AZCosmosMongo_connectionString')]",
					"database": "[parameters('AZCosmosMongo_properties_typeProperties_database')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZBlob2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AZBlob2_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/V2Sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AZBlob2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "project-one-onhold-sink"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AZBlob2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProjectOneADFPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "StartFlow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SplitData",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SQL": {},
									"Excel": {},
									"CSV": {},
									"sink1": {},
									"sink2": {},
									"sink3": {},
									"AllTransactions": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "CopyFailsToMongo",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "StartFlow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "FailedTransactions.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "CosmosDbMongoDbApiSink",
								"writeBatchTimeout": "00:30:00",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "V2Sink",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "MongoFailSink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SplitData')]",
				"[concat(variables('factoryId'), '/datasets/V2Sink')]",
				"[concat(variables('factoryId'), '/datasets/MongoFailSink')]"
			]
		}
	]
}